{
  "list": [
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 554,
      "prompt": "Write a python function which takes a list of integers and only returns the odd ones.",
      "code": "def Split(list): \n    od_li = [] \n    for i in list: \n        if (i % 2 != 0): \n            od_li.append(i)  \n    return od_li",
      "test_imports": [],
      "test_list": [
        "assert Split([1,2,3,4,5,6]) == [1,3,5]",
        "assert Split([10,11,12,13]) == [11,13]",
        "assert Split([7,8,9,1]) == [7,9,1]"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 555,
      "prompt": "Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.",
      "code": "def difference(n):  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  ",
      "test_imports": [],
      "test_list": [
        "assert difference(3) == 30",
        "assert difference(5) == 210",
        "assert difference(2) == 6"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 556,
      "prompt": "Write a python function to count the number of pairs whose xor value is odd.",
      "code": "def find_Odd_Pair(A,N): \n    oddPair = 0\n    for i in range(0,N):  \n        for j in range(i+1,N):  \n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair+=1  \n    return oddPair  ",
      "test_imports": [],
      "test_list": [
        "assert find_Odd_Pair([5,4,7,2,1],5) == 6",
        "assert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12",
        "assert find_Odd_Pair([1,2,3],3) == 2"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 557,
      "prompt": "Write a function to toggle the case of all characters in a string.",
      "code": "def toggle_string(string):\n string1 = string.swapcase()\n return string1",
      "test_imports": [],
      "test_list": [
        "assert toggle_string(\"Python\")==(\"pYTHON\")",
        "assert toggle_string(\"Pangram\")==(\"pANGRAM\")",
        "assert toggle_string(\"LIttLE\")==(\"liTTle\")"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 558,
      "prompt": "Write a python function to find the sum of the per-digit difference between two integers.",
      "code": "def digit_distance_nums(n1, n2):\n         return sum(map(int,str(abs(n1-n2))))",
      "test_imports": [],
      "test_list": [
        "assert digit_distance_nums(1,2) == 1",
        "assert digit_distance_nums(23,56) == 6",
        "assert digit_distance_nums(123,256) == 7"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 559,
      "prompt": "Write a function to find the sum of the largest contiguous sublist in the given list.",
      "code": "def max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far",
      "test_imports": [],
      "test_list": [
        "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7",
        "assert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8",
        "assert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 560,
      "prompt": "Write a function to find the union of the elements of two given tuples and output them in sorted order.",
      "code": "def union_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1 + test_tup2))\n  return (res) ",
      "test_imports": [],
      "test_list": [
        "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)",
        "assert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)",
        "assert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 562,
      "prompt": "Write a python function to find the length of the longest sublists.",
      "code": "def Find_Max_Length(lst):  \n    maxLength = max(len(x) for x in lst )\n    return maxLength ",
      "test_imports": [],
      "test_list": [
        "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4",
        "assert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3",
        "assert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 563,
      "prompt": "Write a function to extract values between quotation marks from a string.",
      "code": "import re\ndef extract_values(text):\n return (re.findall(r'\"(.*?)\"', text))",
      "test_imports": [],
      "test_list": [
        "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']",
        "assert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']",
        "assert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 564,
      "prompt": "Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.",
      "code": "def count_Pairs(arr,n): \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt; ",
      "test_imports": [],
      "test_list": [
        "assert count_Pairs([1,2,1],3) == 2",
        "assert count_Pairs([1,1,1,1],4) == 0",
        "assert count_Pairs([1,2,3,4,5],5) == 10"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 565,
      "prompt": "Write a python function to split a string into characters.",
      "code": "def split(word): \n    return [char for char in word] ",
      "test_imports": [],
      "test_list": [
        "assert split('python') == ['p','y','t','h','o','n']",
        "assert split('Name') == ['N','a','m','e']",
        "assert split('program') == ['p','r','o','g','r','a','m']"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 566,
      "prompt": "Write a function to get the sum of the digits of a non-negative integer.",
      "code": "def sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))",
      "test_imports": [],
      "test_list": [
        "assert sum_digits(345)==12",
        "assert sum_digits(12)==3",
        "assert sum_digits(97)==16"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 567,
      "prompt": "Write a function to check whether a specified list is sorted or not.",
      "code": "def issort_list(list1):\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    return result",
      "test_imports": [],
      "test_list": [
        "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True",
        "assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False",
        "assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 568,
      "prompt": "Write a function to create a list of N empty dictionaries.",
      "code": "def empty_list(length):\n empty_list = [{} for _ in range(length)]\n return empty_list",
      "test_imports": [],
      "test_list": [
        "assert empty_list(5)==[{},{},{},{},{}]",
        "assert empty_list(6)==[{},{},{},{},{},{}]",
        "assert empty_list(7)==[{},{},{},{},{},{},{}]"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 569,
      "prompt": "Write a function to sort each sublist of strings in a given list of lists.",
      "code": "def sort_sublists(list1):\n    result = list(map(sorted,list1)) \n    return result",
      "test_imports": [],
      "test_list": [
        "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
        "assert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]",
        "assert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 572,
      "prompt": "Write a python function to remove duplicate numbers from a given number of lists.",
      "code": "def two_unique_nums(nums):\n  return [i for i in nums if nums.count(i)==1]",
      "test_imports": [],
      "test_list": [
        "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]",
        "assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]",
        "assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 573,
      "prompt": "Write a python function to calculate the product of the unique numbers in a given list.",
      "code": "def unique_product(list_data):\n    temp = list(set(list_data))\n    p = 1\n    for i in temp:\n        p *= i\n    return p",
      "test_imports": [],
      "test_list": [
        "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000",
        "assert unique_product([1, 2, 3, 1,]) == 6",
        "assert unique_product([7, 8, 9, 0, 1, 1]) == 0"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 574,
      "prompt": "Write a function to find the surface area of a cylinder.",
      "code": "def surfacearea_cylinder(r,h):\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea",
      "test_imports": [],
      "test_list": [
        "assert surfacearea_cylinder(10,5)==942.45",
        "assert surfacearea_cylinder(4,5)==226.18800000000002",
        "assert surfacearea_cylinder(4,10)==351.848"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 576,
      "prompt": "Write a python function to check whether a list is sublist of another or not.",
      "code": "def is_Sub_Array(A,B): \n    n = len(A)\n    m = len(B)\n    i = 0; j = 0; \n    while (i < n and j < m):  \n        if (A[i] == B[j]): \n            i += 1; \n            j += 1; \n            if (j == m): \n                return True;  \n        else: \n            i = i - j + 1; \n            j = 0;       \n    return False; ",
      "test_imports": [],
      "test_list": [
        "assert is_Sub_Array([1,4,3,5],[1,2]) == False",
        "assert is_Sub_Array([1,2,1],[1,2,1]) == True",
        "assert is_Sub_Array([1,0,2,2],[2,2,0]) ==False"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 577,
      "prompt": "Write a python function to find the last digit in factorial of a given number.",
      "code": "def last_Digit_Factorial(n): \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0",
      "test_imports": [],
      "test_list": [
        "assert last_Digit_Factorial(4) == 4",
        "assert last_Digit_Factorial(21) == 0",
        "assert last_Digit_Factorial(30) == 0"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 578,
      "prompt": "Write a function to interleave 3 lists of the same length into a single flat list.",
      "code": "def interleave_lists(list1,list2,list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result",
      "test_imports": [],
      "test_list": [
        "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]",
        "assert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]",
        "assert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 579,
      "prompt": "Write a function to find the dissimilar elements in the given two tuples.",
      "code": "def find_dissimilar(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) ",
      "test_imports": [],
      "test_list": [
        "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)",
        "assert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)",
        "assert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 580,
      "prompt": "Write a function to remove uneven elements in the nested mixed tuple.",
      "code": "def even_ele(test_tuple, even_fnc): \n\tres = tuple() \n\tfor ele in test_tuple: \n\t\tif isinstance(ele, tuple): \n\t\t\tres += (even_ele(ele, even_fnc), ) \n\t\telif even_fnc(ele): \n\t\t\tres += (ele, ) \n\treturn res \ndef extract_even(test_tuple):\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\n  return (res) ",
      "test_imports": [],
      "test_list": [
        "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)",
        "assert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))",
        "assert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 581,
      "prompt": "Write a python function to find the surface area of a square pyramid with a given base edge and height.",
      "code": "def surface_Area(b,s): \n    return 2 * b * s + pow(b,2) ",
      "test_imports": [],
      "test_list": [
        "assert surface_Area(3,4) == 33",
        "assert surface_Area(4,5) == 56",
        "assert surface_Area(1,2) == 5"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 582,
      "prompt": "Write a function to check if a dictionary is empty",
      "code": "def my_dict(dict1):\n  if bool(dict1):\n     return False\n  else:\n     return True",
      "test_imports": [],
      "test_list": [
        "assert my_dict({10})==False",
        "assert my_dict({11})==False",
        "assert my_dict({})==True"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 583,
      "prompt": "Write a function which returns nth catalan number.",
      "code": "def catalan_number(num):\n    if num <=1:\n         return 1   \n    res_num = 0\n    for i in range(num):\n        res_num += catalan_number(i) * catalan_number(num-i-1)\n    return res_num",
      "test_imports": [],
      "test_list": [
        "assert catalan_number(10)==16796",
        "assert catalan_number(9)==4862",
        "assert catalan_number(7)==429"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 584,
      "prompt": "Write a function to find the first adverb ending with ly and its positions in a given string.",
      "code": "import re\ndef find_adverbs(text):\n  for m in re.finditer(r\"\\w+ly\", text):\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))",
      "test_imports": [],
      "test_list": [
        "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'",
        "assert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'",
        "assert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 585,
      "prompt": "Write a function to find the n most expensive items in a given dataset.",
      "code": "import heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items",
      "test_imports": [],
      "test_list": [
        "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]",
        "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]",
        "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 586,
      "prompt": "Write a python function to split a list at the nth eelment and add the first part to the end.",
      "code": "def split_Arr(l, n):\n  return l[n:] + l[:n]",
      "test_imports": [],
      "test_list": [
        "assert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]",
        "assert split_Arr([1,2,3,4],1) == [2,3,4,1]",
        "assert split_Arr([0,1,2,3,4,5,6,7],3) == [3,4,5,6,7,0,1,2]"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 587,
      "prompt": "Write a function to convert a list to a tuple.",
      "code": "def list_tuple(listx):\n  tuplex = tuple(listx)\n  return tuplex",
      "test_imports": [],
      "test_list": [
        "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)",
        "assert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)",
        "assert list_tuple([58,44,56])==(58,44,56)"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 588,
      "prompt": "Write a python function to find the difference between largest and smallest value in a given list.",
      "code": "def big_diff(nums):\n     diff= max(nums)-min(nums)\n     return diff",
      "test_imports": [],
      "test_list": [
        "assert big_diff([1,2,3,4]) == 3",
        "assert big_diff([4,5,12]) == 8",
        "assert big_diff([9,2,3]) == 7"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 589,
      "prompt": "Write a function to find perfect squares between two given numbers.",
      "code": "def perfect_squares(a, b):\n    lists=[]\n    for i in range (a,b+1):\n        j = 1;\n        while j*j <= i:\n            if j*j == i:\n                 lists.append(i)  \n            j = j+1\n        i = i+1\n    return lists",
      "test_imports": [],
      "test_list": [
        "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]",
        "assert perfect_squares(50,100)==[64, 81, 100]",
        "assert perfect_squares(100,200)==[100, 121, 144, 169, 196]"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 590,
      "prompt": "Write a function to convert polar coordinates to rectangular coordinates.",
      "code": "import cmath\ndef polar_rect(x,y):\n cn = complex(x,y)\n cn=cmath.polar(cn)\n cn1 = cmath.rect(2, cmath.pi)\n return (cn,cn1)",
      "test_imports": [],
      "test_list": [
        "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))",
        "assert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))",
        "assert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 591,
      "prompt": "Write a python function to interchange the first and last elements in a list.",
      "code": "def swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp  \n    return newList ",
      "test_imports": [],
      "test_list": [
        "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]",
        "assert swap_List([1, 2, 3]) == [3, 2, 1]",
        "assert swap_List([4, 5, 6]) == [6, 5, 4]"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 592,
      "prompt": "Write a python function to find the sum of the product of consecutive binomial co-efficients.",
      "code": "def binomial_Coeff(n,k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n): \n    return binomial_Coeff(2 * n,n - 1); ",
      "test_imports": [],
      "test_list": [
        "assert sum_Of_product(3) == 15",
        "assert sum_Of_product(4) == 56",
        "assert sum_Of_product(1) == 1"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 593,
      "prompt": "Write a function to remove leading zeroes from an ip address.",
      "code": "import re\ndef removezero_ip(ip):\n string = re.sub('\\.[0]*', '.', ip)\n return string\n",
      "test_imports": [],
      "test_list": [
        "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196')",
        "assert removezero_ip(\"12.01.024\")==('12.1.24')",
        "assert removezero_ip(\"216.08.094.0196\")==('216.8.94.196')"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 594,
      "prompt": "Write a function to find the difference of the first even and first odd number of a given list.",
      "code": "def diff_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even-first_odd)",
      "test_imports": [],
      "test_list": [
        "assert diff_even_odd([1,3,5,7,4,1,6,8])==3",
        "assert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1",
        "assert diff_even_odd([1,5,7,9,10])==9"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 595,
      "prompt": "Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.",
      "code": "def min_Swaps(str1,str2): \n    count = 0\n    for i in range(len(str1)):  \n        if str1[i] != str2[i] : \n            count += 1\n    if count % 2 == 0 : \n        return (count // 2) \n    else : \n        return (\"Not Possible\") ",
      "test_imports": [],
      "test_list": [
        "assert min_Swaps(\"1101\",\"1110\") == 1",
        "assert min_Swaps(\"111\",\"000\") == \"Not Possible\"",
        "assert min_Swaps(\"111\",\"110\") == \"Not Possible\""
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 596,
      "prompt": "Write a function to find the size in bytes of the given tuple.",
      "code": "import sys \ndef tuple_size(tuple_list):\n  return (sys.getsizeof(tuple_list)) ",
      "test_imports": [],
      "test_list": [
        "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))",
        "assert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))",
        "assert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 597,
      "prompt": "Write a function to find kth element from the given two sorted arrays.",
      "code": "def find_kth(arr1, arr2, k):\n\tm = len(arr1)\n\tn = len(arr2)\n\tsorted1 = [0] * (m + n)\n\ti = 0\n\tj = 0\n\td = 0\n\twhile (i < m and j < n):\n\t\tif (arr1[i] < arr2[j]):\n\t\t\tsorted1[d] = arr1[i]\n\t\t\ti += 1\n\t\telse:\n\t\t\tsorted1[d] = arr2[j]\n\t\t\tj += 1\n\t\td += 1\n\twhile (i < m):\n\t\tsorted1[d] = arr1[i]\n\t\td += 1\n\t\ti += 1\n\twhile (j < n):\n\t\tsorted1[d] = arr2[j]\n\t\td += 1\n\t\tj += 1\n\treturn sorted1[k - 1]",
      "test_imports": [],
      "test_list": [
        "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6",
        "assert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7) == 256",
        "assert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 6) == 8"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 598,
      "prompt": "Write a function to check whether the given number is armstrong or not.",
      "code": "def armstrong_number(number):\n sum = 0\n times = 0\n temp = number\n while temp > 0:\n           times = times + 1\n           temp = temp // 10\n temp = number\n while temp > 0:\n           reminder = temp % 10\n           sum = sum + (reminder ** times)\n           temp //= 10\n if number == sum:\n           return True\n else:\n           return False",
      "test_imports": [],
      "test_list": [
        "assert armstrong_number(153)==True",
        "assert armstrong_number(259)==False",
        "assert armstrong_number(4458)==False"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 599,
      "prompt": "Write a function to find sum and average of first n natural numbers.",
      "code": "def sum_average(number):\n total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total / number\n return (total,average)",
      "test_imports": [],
      "test_list": [
        "assert sum_average(10)==(55, 5.5)",
        "assert sum_average(15)==(120, 8.0)",
        "assert sum_average(20)==(210, 10.5)"
      ]
    },
    {
      "source_file": "Benchmark Questions Verification V2.ipynb",
      "task_id": 600,
      "prompt": "Write a python function to check whether the given number is even or not.",
      "code": "def is_Even(n): \n    if (n^1 == n+1):\n        return True; \n    else :\n        return False; ",
      "test_imports": [],
      "test_list": [
        "assert is_Even(1) == False",
        "assert is_Even(2) == True",
        "assert is_Even(3) == False"
      ]
    }
  ]
}
